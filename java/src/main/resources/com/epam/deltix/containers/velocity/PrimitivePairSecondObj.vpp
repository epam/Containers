package com.epam.deltix.containers.generated;

#if (${name} == "Decimal")
import com.epam.deltix.dfp.Decimal64;
#end
#if (${name} == "DecimalLong")
import com.epam.deltix.dfp.Decimal64Utils;
#end




/**
 * Public class for store pair of item's. First item is ${type}, second is object.
 */


public class ${name}ObjPair<T> implements ${name}ObjPairReadOnly<T> {


    private int firstHashFunction(${type} value) {
    	#if (${name} == "Obj")
    	if (value == null) return 0; else return value.hashCode();
    	#elseif (${name} == "Int") 
    	return Math.abs(value);
    	#elseif (${name} == "Short") 
    	return Math.abs((int)value);
    	#elseif (${name} == "Char") 
    	return Math.abs((int)value);
    	#elseif (${name} == "Byte") 
    	return Math.abs((int)value);
    	#elseif (${name} == "Long")
    	return Math.abs((int)value);
    	#elseif (${name} == "Float")
    	return Math.abs(Float.floatToRawIntBits(value));
    	#elseif (${name} == "Double") 
    	return Math.abs((int)Double.doubleToRawLongBits(value));
    	#elseif (${name} == "Decimal") 
    	return Math.abs((int)value.hashCode());
    	#elseif (${name} == "DecimalLong") 
    	return Math.abs((int)Decimal64Utils.hashCode(value));
    	#else 
    	return 0;
    	#end
    }

    /**
     * Get second item of this pair.
     * @return Second item of this pair.
     */
    @Override
    public T getSecond() {
        return second;
    }

    /**
     * Set second item of this pair to new value.
     * @param second New value of second item.
     */
    public void setSecond(T second) {
        this.second = second;
    }

    /**
     * Get first item of this pair.
     * @return First item of this pair.
     */
    @Override
    public ${type} getFirst() {
        return first;
    }

    /**
     * Set first item of this pair to new value.
     * @param first New value of first item.
     */
    public void setFirst(${type} first) {
        this.first = first;
    }

    ${type} first;
    T second;


    /**
     * Init this pair by data.
     * @param first New value of first item.
     * @param second New value of second item.
     */
    public void init(${type} first, T second) {
        this.first = first;
        this.second = second;
    }

    /**
     * Create new instance of pair.
     * @param first New value of first item.
     * @param second New value of second item.
     */
    public ${name}ObjPair(${type} first, T second) {
        this.first = first;
        this.second = second;
    }

    /**
     * Create new instance of pair without initialization.
     */
    public ${name}ObjPair() {

    }


    @Override
    public void copyTo(${name}ObjPair<T> destination) {
    	destination.init(first, second);
    }

    public ${name}ObjPair<T> clone() {
    	${name}ObjPair<T> destination = new ${name}ObjPair<T>();
    	copyTo(destination);
    	return destination;
    }

                
    @Override
    public int hashCode() {
    	int hash = 0;
    	if (second != null) hash = second.hashCode() * 31;
    	return firstHashFunction(first) ^ hash;
    }

    @Override
    public String toString() {
    	StringBuilder str = new StringBuilder();
    	str.append('(').append(${type_Object}.toString(first)).append(", ");
    	if (second == null) str.append("null)"); else str.append(second.toString()).append(')');
    	return str.toString(); 
    }

    @Override
    public boolean equals(Object other) {
    	if (other instanceof ${name}ObjPairReadOnly) {
    	    ${name}ObjPairReadOnly pair = (${name}ObjPairReadOnly)other;
    	    #if (${name} == "DecimalLong")
    	    boolean firstEquals = (Decimal64Utils.equals(first, pair.getFirst()));
    	    #elseif (${name} == "Decimal") 
    	    boolean firstEquals = (first.equals(pair.getFirst()));
    	    #else
    	    boolean firstEquals = (first == pair.getFirst());
    	    #end 
    	    if (second == null) {
    	    	if (pair.getSecond() != null) return false;
    	    	return firstEquals;
    	    }
    	    return second.equals(pair.getSecond()) && firstEquals;
    	} 
    	return false;
    }


}